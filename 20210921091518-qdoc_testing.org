:PROPERTIES:
:ID:       ae476ab6-8658-4a19-942c-767513f6969e
:END:
#+title: QDOC Testing

+ Project
  + Configuration
    + Parse (configparser) --> Configuration
  + Source Files
    + Collect Source Files
      + Parse (clang) --> NodeAST
        + Interpret Comment Blocks
          + Parse (qdocparser) --> Atoms
  + Images
    + Find Images
      + Copy Images
  + Generate


#+begin_src mermaid :file assets/images/autogenerated/qdoc_end_to_end_user.png
flowchart LR
  subgraph Project
  end

  subgraph CommandLineInvocation[Command Line Invocation]
  end

  subgraph QDoc
  end

  Project --> QDoc

  CommandLineInvocation --> QDoc

  QDoc --> GeneratedOutput[/Generated Output/]
  QDoc --> LogOutput[/Log Output/]
#+end_src

#+RESULTS:
[[file:assets/images/autogenerated/qdoc_end_to_end_user.png]]


#+begin_src mermaid :file assets/images/autogenerated/qdoc_end_to_end_broken_down.png
flowchart LR
  subgraph Project
    subgraph ProjectConfiguration[Configuration Source]

      subgraph ConfigurationSourcePair[Pair]

        subgraph ConfigurationSourceKey[Key]
           ConfigurationSourceKeyCharacter[\Character\]
           ConfigurationSourceKeySeparator[\Separator\]
        end

        ConfigurationSourcePairSeparator[\Separator\]

        subgraph ConfigurationSourceValue[Value]

          subgraph ConfigurationSourceValueString[String]
            ConfigurationSourceValueStringCharacter[\Character\]
          end

          subgraph ConfigurationSourceValueMultilineString[Multiline String]
          end

          ConfigurationSourceValueMultilineString -.-o ConfigurationSourceValueString

          subgraph ConfigurationSourceValueInteger[Integer]
             ConfigurationSourceValueIntegerDigit[\Digit\]
          end

          subgraph ConfigurationSourceValueToken[Token]
             ConfigurationSourceValueTokenCharacter[\Character\]
          end

        end

      end

    end

    subgraph ProjectSourceFiles[Documentation Source]
    end

    subgraph ProjectImages[Image Source]
    end
  end

  subgraph CommandLineInvocation[Command Line Invocation]
  end

  subgraph QDoc

    subgraph ConfigurationStep[Configuration Step]

      subgraph ConfigurationStepParse[Parse Configuration]

        subgraph ConfigurationStepParsePair[Parse Pair]

            subgraph ConfigurationStepParseKey[Parse Key]
                ConfigurationStepParseKeyParseCharacter([Parse Character])
                ConfigurationStepParseKeyParseSeparator([Parse Separator])

                ConfigurationStepParsePairParsedKeyCharacter[/Parsed Key Character/]
                ConfigurationStepParsePairParsedKeySeparator[/Parsed Key Separator/]
            end


            ConfigurationStepParsePairParseSeparator([Parse Separator])

            subgraph ConfigurationStepParseValue[Parse Value]

                subgraph ConfigurationStepParseValueParseString[Parse String]
                    ConfigurationStepParseValueParseStringParseCharacter([Parse Character])
                end

                subgraph ConfigurationStepParseValueParseInteger[Parse Integer]
                    ConfigurationStepParseValueParseIntegerParseDigit([Parse Digit])
                end

                subgraph ConfigurationStepParseValueParseToken[Parse Token]
                    ConfigurationStepParseValueParseTokenParseCharacter([Parse Character])
                end

               subgraph ConfigurationStepParseValueParseMultilineString[Multiline String]
               end

               ConfigurationStepParseValueParseMultilineString -.-o ConfigurationStepParseValueParseString
            end

        end

      end

    end

  end

  Project --> QDoc

  CommandLineInvocation --> QDoc

  ConfigurationSourceKeyCharacter ---> ConfigurationStepParseKeyParseCharacter
  ConfigurationStepParseKeyParseCharacter ---> ConfigurationStepParsePairParsedKeyCharacter

  ConfigurationSourceKeySeparator ---> ConfigurationStepParseKeyParseSeparator
  ConfigurationStepParseKeyParseSeparator ---> ConfigurationStepParsePairParsedKeySeparator

  QDoc --> GeneratedOutput[/Generated Output/]
  QDoc --> LogOutput[/Log Output/]
#+end_src

#+RESULTS:
[[file:assets/images/autogenerated/qdoc_end_to_end_broken_down.png]]

# Configuration Step

## Configuration Source

+ Pair
  + Key
    + Character
      * In the character class X
    + Separator

    * Contains Character X
    * Contains Character X followed by Subentity Y
  + Separator
  + Value
    + String
      + Character
    + Integer
      + Digit
    + Token
      + Character
    + Multiline String
      + Line
        + String
          + Character
          + Separator

#+BEGIN_CENTER
Pair := Key = Value
Key := [^.]* | [^.]* . Key
Value := String | MultilineString | Digit | Token
String := '' [^''] ''
MultilineString :=
#+END_CENTER

* Configuration Source

Collection of pair sequences...

** Pair Sequence

+ The newline character is a Pair Sequence separator

+ ADD WHITESPACE THINGY

+ Given
  - A string that is a Pair

+ Give
  - Two strings that are a Pair
  + When
    - The strings are concatenated with the Pair Sequence Separator between them
    + Then
      - The concatenated string is a Pair Sequence



** Pair

+ The equal character is a Pair separator
+ The plus-equal combination is a Pair separator

+ Given
  - A string that is a Pair Separator
    + When
      - Any amount of whitespace characters is concatenated with the string
      + Then
        - The string is a Pair Separator
    + When
      - The string is concatenated with any amound of whitespace characters
      + Then
        - The string is a Pair Separator

+ Given
  - A string that is a Key Sequence
  - A string that is a Value
  + When
    - The two strings are concatenated with a Pair Separator between them
    + Then
      - The concatenated string is a pair

*** Key Sequence ()
+ The Dot character is the key sequence separator

+ What is a key sequence?
  + Given
    - Any string that is a Key
    + Then
      - The string is a KeySequence


  # + Given
  #   - Any two strings that are Keys
  #   + When
  #     - The two strings are concatenated with a KeySequenceSeparator between them
  #     + Then
  #       - The concatenated string is a KeySequence

  + Given
    - Any two strings that are KeySequence
    + When
      - The two strings are concatenated with a KeySequenceSeparator between them
      + Then
        - The concatenated string is a KeySequence




**** Key (It is a String formed by characters)
+ Which strings are a Key?
  # + Given
  #   - the empty string
  #   + Then
  #     - It is not a Key
  + Given
    - A non-empty string
    + When
      - It does not contain any the KeySequence-Separator or Whitespace Characters
        + Then
          - It is a Key

*** Value
 + What is a value?

**** IntegerValue
+ Given
  - A string
  + When
    - It is a single character string in the character class [0-9]
    + Then
      - It is an IntegerValue

+ Given
  - Any IntegerValue that is not "0"
  - Any IntegerValue
  + When
    - The IntegerValue that is not "0" is concatenated with the other IntegerValue
    + Then
      - The concatenated string is an IntegerValue

**** StringValue
+ Given
  - Any string that does not contain the newline character
  + When
    - The string starts with the quote character
    - The string ends with the quote character
    + Then
      - The string is a StringValue

**** TokenValue
+ Given
  - Any string
    + When
      - The string does not contain whitespace characters
      - The string is not an IntegerValue
      - The string is not a StringValue
    + Then
      - The string is a TokenValue

**** MultilineStringValue
???

--------------------------------------------------







* New Approach Based on the Code
